diff -Naur raspicam-0.1.3/src/private/private_impl.cpp raspicam-0.1.3_fml/src/private/private_impl.cpp
--- raspicam-0.1.3/src/private/private_impl.cpp	2015-02-28 16:48:42.000000000 +0100
+++ raspicam-0.1.3_fml/src/private/private_impl.cpp	2015-11-29 17:49:35.611878750 +0100
@@ -78,9 +78,9 @@
             State.ISO = 400;
             State.videoStabilisation = false;
             State.exposureCompensation = 0;
-            State.captureFtm=RASPICAM_FORMAT_RGB;
+            State.captureFtm=RASPICAM_FORMAT_GRAY;
             State.rpc_exposureMode = RASPICAM_EXPOSURE_AUTO;
-            State.rpc_exposureMeterMode = RASPICAM_METERING_AVERAGE;
+            State.rpc_exposureMeterMode = RASPICAM_METERING_MATRIX;
             State.rpc_awbMode = RASPICAM_AWB_AUTO;
             State.rpc_imageEffect = RASPICAM_IMAGE_EFFECT_NONE;
             State.colourEffects.enable = 0;
diff -Naur raspicam-0.1.3/src/raspicam_cv.cpp raspicam-0.1.3_fml/src/raspicam_cv.cpp
--- raspicam-0.1.3/src/raspicam_cv.cpp	2015-02-28 16:48:42.000000000 +0100
+++ raspicam-0.1.3_fml/src/raspicam_cv.cpp	2015-11-29 17:53:24.383161099 +0100
@@ -43,8 +43,10 @@
 namespace raspicam {
     RaspiCam_Cv::RaspiCam_Cv() {
         _impl=new _private::Private_Impl();
-	set(CV_CAP_PROP_FORMAT,CV_8UC3);
- 
+        set(CV_CAP_PROP_FORMAT,CV_8UC1);
+        set(CV_CAP_PROP_FRAME_WIDTH, 640);
+        set(CV_CAP_PROP_FRAME_HEIGHT, 480);
+        open();
     }
     RaspiCam_Cv::~RaspiCam_Cv() {
         delete _impl;
@@ -70,16 +72,20 @@
      * Grabs the next frame from video file or capturing device.
      */
     bool RaspiCam_Cv::grab() {
-        return _impl->grab();
+        bool retval = _impl->grab();
+        boost::posix_time::ptime current_date_microseconds = boost::posix_time::microsec_clock::local_time();
+        timestamp = (clock_t)current_date_microseconds.time_of_day().total_milliseconds(); // get local timestamp
+        return(retval);
     }
 
     /**
     *Decodes and returns the grabbed video frame.
      */
-    void RaspiCam_Cv::retrieve ( cv::Mat& image ) {
+    bool RaspiCam_Cv::retrieve ( cv::Mat& image, int channel ) {
         //here we go!
         image.create ( _impl->getHeight(),_impl->getWidth(),imgFormat );
         _impl->retrieve ( image.ptr<uchar> ( 0 ));
+        return(true);
     }
 
     /**Returns the specified VideoCapture property
@@ -111,7 +117,7 @@
         case CV_CAP_PROP_EXPOSURE :
             if ( _impl->getShutterSpeed() ==0 )
                 return -1;//auto
-            else return Scaler::scale (0,330000, 0,100, _impl->getShutterSpeed() )  ;
+            else return _impl->getShutterSpeed();
 	   break;
         case CV_CAP_PROP_CONVERT_RGB :
             return ( imgFormat==CV_8UC3 );
@@ -122,6 +128,9 @@
         case CV_CAP_PROP_WHITE_BALANCE_BLUE_U:
             return _impl->getAWBG_blue()*100;
         break;
+        case CV_CAP_PROP_POS_MSEC:
+            return timestamp;
+        break;
         default :
             return -1;
         };
@@ -170,8 +179,8 @@
             _impl->setISO ( Scaler::scale ( 0,100,0,800, value ) );
             break;
         case CV_CAP_PROP_EXPOSURE :
-            if ( value>0 && value<=100 ) { 
-                _impl->setShutterSpeed ( Scaler::scale ( 0,100,0,330000, value ) );
+            if ( value>=100 && value<=330000 ) { 
+                _impl->setShutterSpeed (value);
             } else {
                 _impl->setExposure ( RASPICAM_EXPOSURE_AUTO );
                 _impl->setShutterSpeed ( 0 );
diff -Naur raspicam-0.1.3/src/raspicam_cv.h raspicam-0.1.3_fml/src/raspicam_cv.h
--- raspicam-0.1.3/src/raspicam_cv.h	2015-02-28 16:48:42.000000000 +0100
+++ raspicam-0.1.3_fml/src/raspicam_cv.h	2015-11-29 19:32:36.398939210 +0100
@@ -37,6 +37,8 @@
 
 #ifndef RaspiCam_CV_H
 #define RaspiCam_CV_H
+#include <ctime>
+#include <boost/date_time/posix_time/posix_time.hpp>
 #include <opencv2/core/core.hpp>
 #include <opencv2/highgui/highgui.hpp>
 namespace raspicam {
@@ -46,7 +48,7 @@
     };
     /**Class for using Raspberry camera as in opencv
     */
-    class RaspiCam_Cv {
+    class RaspiCam_Cv : public cv::VideoCapture {
         _private::Private_Impl *_impl;
         public:
         /**Constructor
@@ -75,7 +77,7 @@
         /**
         *Decodes and returns the grabbed video frame.
          */
-        void retrieve ( cv::Mat& image );
+        bool retrieve ( cv::Mat& image, int channel=0 );
 
         /**Returns the specified VideoCapture property
          */
@@ -107,6 +109,7 @@
         private:
         cv::Mat image;
         int imgFormat;//required image format //
+        clock_t timestamp;
      };
 
 };
